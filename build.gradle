buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:${grailsVersion}"
        classpath "org.grails:grails-docs:${grailsVersion}"
        classpath "com.bmuschko:gradle-nexus-plugin:2.3.1"
        classpath "com.github.jengelman.gradle.plugins:shadow:5.1.0"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5"
        classpath "io.github.groovylang.groovydoc:groovydoc-gradle-plugin:1.0.1"
        classpath "io.micronaut.docs:micronaut-docs-asciidoc-extensions:$micronautDocsVersion"
        classpath "io.micronaut.docs:micronaut-docs-gradle-plugins:$micronautDocsVersion"
        classpath "io.spring.nohttp:nohttp-gradle:0.0.4.RELEASE"
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.15.0" apply false
}

repositories {
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://oss.jfrog.org/oss-snapshot-local" }
}

version project.projectVersion

ext {
    distInstallDir = file("$buildDir/dist-tmp")
    homeBinDir = file("bin")
    homeLibDir = file("lib")
    homeSrcDir = file("src")
}

subprojects { Project subproject ->

    repositories {
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://oss.jfrog.org/oss-snapshot-local" }
    }

    apply plugin: "java-library"
    apply plugin: "groovy"
    apply plugin: "checkstyle"
    apply plugin: "io.spring.nohttp"

    if (subproject.name.contains("example") || subproject.name.startsWith("benchmark")) {
        return
    }

    group "io.micronaut.graphql"
    version project.projectVersion

    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"

    ext {
        isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")
        isConfiguration = subproject.projectDir.parentFile.name == "configurations"
    }

    apply from: "https://raw.githubusercontent.com/micronaut-projects/micronaut-build/v${micronautBuildVersion}/publishing.gradle"

    jar {
        manifest {
            attributes("Automatic-Module-Name": "${subproject.group}.${subproject.name}".replaceAll('[^\\w\\.\\$_]', "_"))
            attributes("Implementation-Version": projectVersion)
            attributes("Implementation-Title": title)
        }
    }

    bintray.publish = true

    tasks.withType(Test) {

        jvmArgs "-Duser.country=US"
        jvmArgs "-Duser.language=en"

        testLogging {
            exceptionFormat = "full"
        }

        afterSuite {
            System.out.print(".")
            System.out.flush()
        }

        reports.html.enabled = !System.getenv("GITHUB_ACTIONS")
        reports.junitXml.enabled = !System.getenv("GITHUB_ACTIONS")
    }

    configurations {
        documentation
        all {
            resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                String group = details.requested.group
                if (group == "org.codehaus.groovy") {
                    details.useVersion(groovyVersion)
                }
                if (group == "org.ow2.asm") {
                    details.useVersion(asmVersion)
                }
            }
        }
    }

    dependencies {
        api platform("io.micronaut:micronaut-bom:${micronautVersion}")
        annotationProcessor platform("io.micronaut:micronaut-bom:${micronautVersion}")
        documentation "org.codehaus.groovy:groovy-templates:${groovyVersion}"
        documentation "org.codehaus.groovy:groovy-dateutil:${groovyVersion}"
        implementation platform("io.micronaut:micronaut-bom:${micronautVersion}")
        testImplementation platform("io.micronaut:micronaut-bom:${micronautVersion}")
        testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
        testImplementation "cglib:cglib-nodep:${cglibVersion}"
        testImplementation "io.micronaut:micronaut-inject-groovy:${micronautVersion}"
        testImplementation "io.micronaut.test:micronaut-test-spock:${micronautTestVersion}"
        testImplementation "org.codehaus.groovy:groovy-test:${groovyVersion}"
        testImplementation "org.objenesis:objenesis:${objenesisVersion}"
        testImplementation("org.spockframework:spock-core:${spockVersion}") {
            exclude module: "groovy-all"
        }
        testRuntimeOnly "ch.qos.logback:logback-classic:${logbackClassicVersion}"
    }

    groovydoc {
        classpath += project.configurations.documentation
    }

    task allDeps(type: DependencyReportTask) {}

    checkstyle {
        toolVersion = 8.16
        configFile = rootProject.file("config/checkstyle/checkstyle.xml")
        showViolations = true
    }

    checkstyleTest.enabled = false

    tasks.withType(GroovyCompile) {
        groovyOptions.forkOptions.jvmArgs.add("-Dgroovy.parameters=true")
    }

    tasks.withType(JavaCompile){
        options.encoding = "UTF-8"
        options.compilerArgs.add("-parameters")
    }
}

apply from: "https://raw.githubusercontent.com/micronaut-projects/micronaut-docs/v${micronautDocsVersion}/gradle/docs.gradle"

allprojects {

    apply plugin: "idea"

    idea {
        module {
            outputDir file("build/classes/java/main")
            testOutputDir file("build/classes/groovy/test")
        }
    }

    if (it.name.contains("example") || it.name.startsWith("benchmark")) {
        return
    }

    apply from: rootProject.file("gradle/license.gradle")
}

project.afterEvaluate {
    allprojects.repositories.each { handler ->
        handler.each {
            if (it.url.toString().startsWith("http://")) {
                throw new GradleException("Build should not define insecure HTTP-based Maven repostories")
            }
        }
    }
}
